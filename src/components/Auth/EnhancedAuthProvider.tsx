/**
 * –≠—Ç–∞–ª–æ–Ω–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –Ω–∞–¥–µ–∂–Ω—É—é –∏ –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
 */

import React, { createContext, useContext, useEffect, useState, useCallback } from 'react';
import { supabase } from '../../lib/supabase';
import { GuestService } from '../../lib/guest/GuestService';
import type { User } from '../../types';

interface AuthContextType {
  user: User | null;
  loading: boolean;
  signInWithGoogle: () => Promise<void>;
  signInAsGuest: (guestName?: string) => Promise<void>;
  signOut: () => Promise<void>;
  updateProfile: (updates: Partial<User>) => Promise<boolean>;
}

const AuthContext = createContext<AuthContextType | null>(null);

export const useAuth = (): AuthContextType => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ AuthProvider');
  }
  return context;
};

interface AuthProviderProps {
  children: React.ReactNode;
}

export const EnhancedAuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const [initialized, setInitialized] = useState(false);

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
   */
  useEffect(() => {
    const initializeAuth = async () => {
      try {
        console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AuthProvider');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é Supabase
        const { data: { session }, error } = await supabase.auth.getSession();
        
        if (error) {
          console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
        } else if (session?.user) {
          console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å–µ—Å—Å–∏—è Supabase');
          const currentUser = await loadUserProfile(session.user);
          setUser(currentUser);
        } else {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Å—Ç–µ–≤—É—é —Å–µ—Å—Å–∏—é
          const guestSession = GuestService.getGuestSession();
          if (guestSession) {
            console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≥–æ—Å—Ç–µ–≤–∞—è —Å–µ—Å—Å–∏—è');
            setUser({
              id: guestSession.user.id,
              email: '',
              name: guestSession.user.name,
              username: guestSession.user.username,
              is_guest: true,
              created_at: guestSession.user.created_at
            });
          }
        }

        setInitialized(true);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
      } finally {
        setLoading(false);
      }
    };

    initializeAuth();
  }, []);

  /**
   * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   */
  useEffect(() => {
    if (!initialized) return;

    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        console.log('üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', event);

        try {
          if (session?.user) {
            const currentUser = await loadUserProfile(session.user);
            setUser(currentUser);
          } else if (event === 'SIGNED_OUT') {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Å—Ç–µ–≤—É—é —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞
            const guestSession = GuestService.getGuestSession();
            if (guestSession) {
              setUser({
                id: guestSession.user.id,
                email: '',
                name: guestSession.user.name,
                username: guestSession.user.username,
                is_guest: true,
                created_at: guestSession.user.created_at
              });
            } else {
              setUser(null);
            }
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
        }
      }
    );

    return () => {
      subscription.unsubscribe();
    };
  }, [initialized]);

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  const loadUserProfile = async (authUser: any): Promise<User> => {
    try {
      console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      
      const { data: profile, error } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', authUser.id)
        .single();

      if (error && error.code !== 'PGRST116') {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
      }

      if (profile) {
        console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
        return {
          id: profile.id,
          email: profile.email || authUser.email,
          name: profile.name,
          username: profile.username,
          avatar_url: profile.avatar_url,
          bio: profile.bio,
          privacy_settings: profile.privacy_settings,
          is_guest: profile.is_guest,
          email_verified: profile.email_verified,
          interests: profile.interests,
          created_at: profile.created_at
        };
      } else {
        // –°–æ–∑–¥–∞–µ–º fallback –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        console.log('‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º fallback');
        return createFallbackUser(authUser);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ loadUserProfile:', error);
      return createFallbackUser(authUser);
    }
  };

  const createFallbackUser = (authUser: any): User => {
    return {
      id: authUser.id,
      email: authUser.email || '',
      name: authUser.user_metadata?.full_name || authUser.email || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      avatar_url: authUser.user_metadata?.avatar_url,
      username: authUser.user_metadata?.username || 
               authUser.email?.split('@')[0] || 
               `user_${authUser.id.substring(0, 8)}`,
      privacy_settings: 'public',
      is_guest: authUser.is_anonymous || false,
      created_at: authUser.created_at || new Date().toISOString()
    };
  };

  /**
   * –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Google
   */
  const signInWithGoogle = useCallback(async () => {
    try {
      console.log('üîÑ –ù–∞—á–∞–ª–æ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google');
      
      const { error } = await supabase.auth.signInWithOAuth({
        provider: 'google',
        options: {
          redirectTo: `${window.location.origin}/auth/callback`
        }
      });
      
      if (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google:', error);
        throw error;
      }
      
      console.log('‚úÖ –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Google –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ signInWithGoogle:', error);
      throw error;
    }
  }, []);

  /**
   * –ì–æ—Å—Ç–µ–≤–æ–π –≤—Ö–æ–¥
   */
  const signInAsGuest = useCallback(async (guestName?: string) => {
    try {
      console.log('üîÑ –ù–∞—á–∞–ª–æ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞');
      
      const guestSession = GuestService.createGuestSession(guestName);
      
      setUser({
        id: guestSession.user.id,
        email: '',
        name: guestSession.user.name,
        username: guestSession.user.username,
        is_guest: true,
        created_at: guestSession.user.created_at
      });

      console.log('‚úÖ –ì–æ—Å—Ç–µ–≤–æ–π –≤—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞:', error);
      throw error;
    }
  }, []);

  /**
   * –í—ã—Ö–æ–¥
   */
  const signOut = useCallback(async () => {
    try {
      console.log('üîÑ –ù–∞—á–∞–ª–æ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
      
      if (user?.is_guest) {
        // –û—á–∏—â–∞–µ–º –≥–æ—Å—Ç–µ–≤—É—é —Å–µ—Å—Å–∏—é
        GuestService.clearGuestSession();
      } else {
        // –í—ã—Ö–æ–¥–∏–º –∏–∑ Supabase
        const { error } = await supabase.auth.signOut();
        if (error) {
          console.error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ Supabase:', error);
          throw error;
        }
      }
      
      setUser(null);
      console.log('‚úÖ –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ signOut:', error);
      throw error;
    }
  }, [user]);

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
   */
  const updateProfile = useCallback(async (updates: Partial<User>): Promise<boolean> => {
    if (!user) return false;

    try {
      if (user.is_guest) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥–æ—Å—Ç–µ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
        const success = GuestService.updateGuestUser(updates);
        
        if (success) {
          const updatedUser = { ...user, ...updates };
          setUser(updatedUser);
          return true;
        }
        return false;
      } else {
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        const { error } = await supabase
          .from('profiles')
          .update({
            ...updates,
            updated_at: new Date().toISOString()
          })
          .eq('id', user.id);

        if (error) {
          console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
          return false;
        }

        const updatedUser = { ...user, ...updates };
        setUser(updatedUser);
        return true;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ updateProfile:', error);
      return false;
    }
  }, [user]);

  const contextValue: AuthContextType = {
    user,
    loading,
    signInWithGoogle,
    signInAsGuest,
    signOut,
    updateProfile
  };

  return (
    <AuthContext.Provider value={contextValue}>
      {children}
    </AuthContext.Provider>
  );
};