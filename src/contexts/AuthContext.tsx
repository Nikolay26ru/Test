import React, { createContext, useContext, useEffect, useState } from 'react';
import { supabase } from '../lib/supabase';
import type { AuthContextType, User } from '../types';

const AuthContext = createContext<AuthContextType>({
  user: null,
  loading: true,
  signInWithGoogle: async () => {},
  signOut: async () => {}
});

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    console.log('üîÑ AuthProvider: Initializing auth state...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é Supabase
    supabase.auth.getSession().then(({ data: { session }, error }) => {
      if (error) {
        console.error('‚ùå AuthProvider: Error getting session:', error);
        setLoading(false);
        return;
      }

      if (session?.user) {
        console.log('‚úÖ AuthProvider: Found existing session for user:', session.user.id);
        loadUserProfile(session.user);
      } else {
        console.log('‚ÑπÔ∏è AuthProvider: No existing session found');
        setLoading(false);
      }
    });

    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        console.log('üîÑ AuthProvider: Auth state changed:', event);
        
        if (session?.user) {
          console.log('‚úÖ AuthProvider: User signed in:', session.user.id);
          await loadUserProfile(session.user);
        } else if (event === 'SIGNED_OUT') {
          console.log('‚ÑπÔ∏è AuthProvider: User signed out');
          setUser(null);
          setLoading(false);
        }
      }
    );

    return () => {
      console.log('üßπ AuthProvider: Cleaning up auth subscription');
      subscription.unsubscribe();
    };
  }, []);

  const loadUserProfile = async (authUser: any) => {
    console.log('üîç AuthProvider: Loading profile for user:', authUser.id);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –Ω–∞ –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å
    const timeoutId = setTimeout(() => {
      console.warn('‚è∞ AuthProvider: Profile loading timeout, using fallback');
      const fallbackUser = createFallbackUser(authUser);
      setUser(fallbackUser);
      setLoading(false);
    }, 8000); // 8 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç

    try {
      // –°—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º fallback –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const fallbackUser = createFallbackUser(authUser);
      
      console.log('üîç AuthProvider: Attempting to load profile from database...');
      
      // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
      const profilePromise = supabase
        .from('profiles')
        .select('*')
        .eq('id', authUser.id)
        .single();

      // –ñ–¥–µ–º –º–∞–∫—Å–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error('Database timeout')), 5000);
      });

      try {
        const { data: profile, error } = await Promise.race([profilePromise, timeoutPromise]) as any;
        
        if (profile && !error) {
          console.log('‚úÖ AuthProvider: Profile loaded from database:', profile.name);
          clearTimeout(timeoutId);
          setUser(profile);
          setLoading(false);
          return;
        }

        if (error?.code === 'PGRST116') {
          console.log('üîß AuthProvider: Profile not found, creating...');
          // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å, –Ω–æ –Ω–µ –∂–¥–µ–º –¥–æ–ª–≥–æ
          const createPromise = supabase
            .from('profiles')
            .insert(fallbackUser)
            .select()
            .single();

          const createTimeoutPromise = new Promise((_, reject) => {
            setTimeout(() => reject(new Error('Create timeout')), 3000);
          });

          try {
            const { data: newProfile } = await Promise.race([createPromise, createTimeoutPromise]) as any;
            if (newProfile) {
              console.log('‚úÖ AuthProvider: Profile created successfully');
              clearTimeout(timeoutId);
              setUser(newProfile);
              setLoading(false);
              return;
            }
          } catch (createError) {
            console.warn('‚ö†Ô∏è AuthProvider: Failed to create profile, using fallback');
          }
        }
      } catch (dbError) {
        console.warn('‚ö†Ô∏è AuthProvider: Database operation failed:', dbError);
      }

      // –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
      console.log('üîß AuthProvider: Using fallback user data');
      clearTimeout(timeoutId);
      setUser(fallbackUser);
      setLoading(false);

    } catch (error) {
      console.error('‚ùå AuthProvider: Critical error in loadUserProfile:', error);
      clearTimeout(timeoutId);
      const fallbackUser = createFallbackUser(authUser);
      setUser(fallbackUser);
      setLoading(false);
    }
  };

  const createFallbackUser = (authUser: any): User => {
    console.log('üîß AuthProvider: Creating fallback user');
    return {
      id: authUser.id,
      email: authUser.email || '',
      name: authUser.user_metadata?.full_name || authUser.email || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      avatar_url: authUser.user_metadata?.avatar_url,
      username: authUser.user_metadata?.username || 
               authUser.email?.split('@')[0] || 
               `user_${authUser.id.substring(0, 8)}`,
      privacy_settings: 'public',
      is_guest: authUser.is_anonymous || false,
      created_at: authUser.created_at || new Date().toISOString()
    };
  };

  const signInWithGoogle = async () => {
    console.log('üîÑ AuthProvider: Starting Google sign in...');
    
    try {
      const { error } = await supabase.auth.signInWithOAuth({
        provider: 'google',
        options: {
          redirectTo: `${window.location.origin}/auth/callback`
        }
      });
      
      if (error) {
        console.error('‚ùå AuthProvider: Google sign in error:', error);
        throw error;
      }
      
      console.log('‚úÖ AuthProvider: Google sign in initiated');
    } catch (error) {
      console.error('‚ùå AuthProvider: Error in signInWithGoogle:', error);
      throw error;
    }
  };

  const signOut = async () => {
    console.log('üîÑ AuthProvider: Signing out...');
    
    try {
      const { error } = await supabase.auth.signOut();
      if (error) {
        console.error('‚ùå AuthProvider: Sign out error:', error);
        throw error;
      }
      console.log('‚úÖ AuthProvider: Successfully signed out');
    } catch (error) {
      console.error('‚ùå AuthProvider: Error in signOut:', error);
      throw error;
    }
  };

  const value = {
    user,
    loading,
    signInWithGoogle,
    signOut
  };

  console.log('üîÑ AuthProvider: Rendering with state:', { 
    hasUser: !!user, 
    loading, 
    userName: user?.name,
    isGuest: user?.is_guest 
  });

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};