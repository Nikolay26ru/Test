/**
 * –≠—Ç–∞–ª–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∏—Å—á–µ—Ä–ø—ã–≤–∞—é—â–µ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
 */

export enum LogLevel {
  DEBUG = 0,
  INFO = 1,
  WARN = 2,
  ERROR = 3,
  CRITICAL = 4
}

export interface LogEntry {
  timestamp: string;
  level: LogLevel;
  message: string;
  context?: Record<string, any>;
  error?: Error;
  userId?: string;
  sessionId?: string;
  requestId?: string;
}

export class LoggingService {
  private static logs: LogEntry[] = [];
  private static maxLogs = 1000;
  private static currentLogLevel = LogLevel.INFO;
  private static sessionId = this.generateSessionId();

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  static initialize(config?: {
    maxLogs?: number;
    logLevel?: LogLevel;
    enableConsole?: boolean;
    enableRemote?: boolean;
  }): void {
    if (config?.maxLogs) {
      this.maxLogs = config.maxLogs;
    }
    
    if (config?.logLevel !== undefined) {
      this.currentLogLevel = config.logLevel;
    }

    this.info('LoggingService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', {
      maxLogs: this.maxLogs,
      logLevel: LogLevel[this.currentLogLevel],
      sessionId: this.sessionId
    });

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
    this.setupGlobalErrorHandlers();

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –ª–æ–≥–æ–≤
    setInterval(() => {
      this.cleanupOldLogs();
    }, 5 * 60 * 1000); // –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
   */
  static debug(message: string, context?: Record<string, any>): void {
    this.log(LogLevel.DEBUG, message, context);
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  static info(message: string, context?: Record<string, any>): void {
    this.log(LogLevel.INFO, message, context);
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
   */
  static warn(message: string, context?: Record<string, any>): void {
    this.log(LogLevel.WARN, message, context);
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
   */
  static error(message: string, error?: Error | any, context?: Record<string, any>): void {
    this.log(LogLevel.ERROR, message, context, error);
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
   */
  static critical(message: string, error?: Error | any, context?: Record<string, any>): void {
    this.log(LogLevel.CRITICAL, message, context, error);
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  static performance(operation: string, duration: number, context?: Record<string, any>): void {
    this.info(`–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${operation}`, {
      ...context,
      duration: `${duration.toFixed(2)}ms`,
      performance: true
    });
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
   */
  static userAction(action: string, userId?: string, context?: Record<string, any>): void {
    this.info(`–î–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${action}`, {
      ...context,
      userId,
      userAction: true
    });
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
   */
  static security(event: string, severity: 'low' | 'medium' | 'high' | 'critical', context?: Record<string, any>): void {
    const level = severity === 'critical' ? LogLevel.CRITICAL : 
                  severity === 'high' ? LogLevel.ERROR :
                  severity === 'medium' ? LogLevel.WARN : LogLevel.INFO;

    this.log(level, `–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: ${event}`, {
      ...context,
      security: true,
      severity
    });
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  static apiRequest(method: string, url: string, status: number, duration: number, context?: Record<string, any>): void {
    const level = status >= 500 ? LogLevel.ERROR :
                  status >= 400 ? LogLevel.WARN : LogLevel.INFO;

    this.log(level, `API –∑–∞–ø—Ä–æ—Å: ${method} ${url}`, {
      ...context,
      method,
      url,
      status,
      duration: `${duration.toFixed(2)}ms`,
      apiRequest: true
    });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤
   */
  static getLogs(filter?: {
    level?: LogLevel;
    since?: Date;
    userId?: string;
    limit?: number;
  }): LogEntry[] {
    let filteredLogs = [...this.logs];

    if (filter?.level !== undefined) {
      filteredLogs = filteredLogs.filter(log => log.level >= filter.level!);
    }

    if (filter?.since) {
      filteredLogs = filteredLogs.filter(log => 
        new Date(log.timestamp) >= filter.since!
      );
    }

    if (filter?.userId) {
      filteredLogs = filteredLogs.filter(log => log.userId === filter.userId);
    }

    if (filter?.limit) {
      filteredLogs = filteredLogs.slice(-filter.limit);
    }

    return filteredLogs;
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤
   */
  static exportLogs(format: 'json' | 'csv' = 'json'): string {
    const logs = this.getLogs();

    if (format === 'csv') {
      const headers = ['timestamp', 'level', 'message', 'context', 'error'];
      const rows = logs.map(log => [
        log.timestamp,
        LogLevel[log.level],
        log.message,
        JSON.stringify(log.context || {}),
        log.error?.message || ''
      ]);

      return [headers, ...rows].map(row => row.join(',')).join('\n');
    }

    return JSON.stringify(logs, null, 2);
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤
   */
  static clearLogs(): void {
    this.logs = [];
    this.info('–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã');
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–æ–≥–æ–≤
   */
  static getLogStats(): {
    total: number;
    byLevel: Record<string, number>;
    oldestLog?: string;
    newestLog?: string;
  } {
    const stats = {
      total: this.logs.length,
      byLevel: {} as Record<string, number>,
      oldestLog: this.logs[0]?.timestamp,
      newestLog: this.logs[this.logs.length - 1]?.timestamp
    };

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ —É—Ä–æ–≤–Ω—è–º
    for (const level of Object.values(LogLevel)) {
      if (typeof level === 'number') {
        stats.byLevel[LogLevel[level]] = this.logs.filter(log => log.level === level).length;
      }
    }

    return stats;
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  private static log(level: LogLevel, message: string, context?: Record<string, any>, error?: Error | any): void {
    if (level < this.currentLogLevel) {
      return;
    }

    const logEntry: LogEntry = {
      timestamp: new Date().toISOString(),
      level,
      message,
      context,
      error: error instanceof Error ? error : undefined,
      sessionId: this.sessionId,
      requestId: this.generateRequestId()
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤ –ª–æ–≥–æ–≤
    this.logs.push(logEntry);

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞
    if (this.logs.length > this.maxLogs) {
      this.logs = this.logs.slice(-this.maxLogs);
    }

    // –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
    this.logToConsole(logEntry);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ)
    if (level >= LogLevel.ERROR) {
      this.sendToRemoteLogging(logEntry);
    }
  }

  /**
   * –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
   */
  private static logToConsole(entry: LogEntry): void {
    const prefix = `[${entry.timestamp}] [${LogLevel[entry.level]}]`;
    const message = `${prefix} ${entry.message}`;

    switch (entry.level) {
      case LogLevel.DEBUG:
        console.debug(message, entry.context, entry.error);
        break;
      case LogLevel.INFO:
        console.info(message, entry.context);
        break;
      case LogLevel.WARN:
        console.warn(message, entry.context);
        break;
      case LogLevel.ERROR:
        console.error(message, entry.context, entry.error);
        break;
      case LogLevel.CRITICAL:
        console.error(`üö® ${message}`, entry.context, entry.error);
        break;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  private static async sendToRemoteLogging(entry: LogEntry): Promise<void> {
    try {
      // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
      // –ù–∞–ø—Ä–∏–º–µ—Ä: Sentry, LogRocket, CloudWatch, –∏ —Ç.–¥.
      
      if (process.env.NODE_ENV === 'production') {
        // –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏
        // await fetch('/api/logs', {
        //   method: 'POST',
        //   headers: { 'Content-Type': 'application/json' },
        //   body: JSON.stringify(entry)
        // });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', error);
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫
   */
  private static setupGlobalErrorHandlers(): void {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
    window.addEventListener('error', (event) => {
      this.error('–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ JavaScript', event.error, {
        filename: event.filename,
        lineno: event.lineno,
        colno: event.colno,
        message: event.message
      });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö Promise
    window.addEventListener('unhandledrejection', (event) => {
      this.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ Promise', event.reason, {
        promise: event.promise
      });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Ç–µ—Ä–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    window.addEventListener('offline', () => {
      this.warn('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º –ø–æ—Ç–µ—Ä—è–Ω–æ');
    });

    window.addEventListener('online', () => {
      this.info('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    });
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤
   */
  private static cleanupOldLogs(): void {
    const maxAge = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞
    const cutoff = new Date(Date.now() - maxAge);

    const initialCount = this.logs.length;
    this.logs = this.logs.filter(log => new Date(log.timestamp) > cutoff);

    if (this.logs.length < initialCount) {
      this.debug(`–û—á–∏—â–µ–Ω–æ ${initialCount - this.logs.length} —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤`);
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID —Å–µ—Å—Å–∏–∏
   */
  private static generateSessionId(): string {
    return `session_${Date.now()}_${Math.random().toString(36).substring(2)}`;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –∑–∞–ø—Ä–æ—Å–∞
   */
  private static generateRequestId(): string {
    return `req_${Date.now()}_${Math.random().toString(36).substring(2)}`;
  }
}