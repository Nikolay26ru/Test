// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GigaChat API
export interface GigaChatMessage {
  role: 'user' | 'assistant' | 'system';
  content: string;
}

export interface GigaChatResponse {
  reply: string;
  usage?: any;
  fallback?: boolean;
  error?: string;
}

export async function getAIRecommendations(params: {
  context: string;
  messages?: GigaChatMessage[];
}): Promise<GigaChatResponse> {
  try {
    console.log('ü§ñ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ GigaChat API');
    
    const messages: GigaChatMessage[] = params.messages || [
      { role: 'user', content: '–î–∞–π –º–Ω–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤' }
    ];

    const response = await fetch('/.netlify/functions/gigachat', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        messages,
        context: params.context
      })
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç GigaChat API');
    
    return data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ GigaChat API:', error);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    return {
      reply: `
‚Ä¢ **–£–º–Ω—ã–µ —á–∞—Å—ã Apple Watch –∏–ª–∏ Samsung Galaxy Watch** (–æ—Ç 25,000 —Ä—É–±.) - –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
‚Ä¢ **–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏ AirPods –∏–ª–∏ Sony WH-1000XM4** (–æ—Ç 15,000 —Ä—É–±.) - –¥–ª—è –º—É–∑—ã–∫–∏ –∏ –∑–≤–æ–Ω–∫–æ–≤
‚Ä¢ **–ü–æ—Ä—Ç–∞—Ç–∏–≤–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ JBL –∏–ª–∏ Marshall** (–æ—Ç 8,000 —Ä—É–±.) - –¥–ª—è –¥–æ–º–∞—à–Ω–∏—Ö –≤–µ—á–µ—Ä–∏–Ω–æ–∫
‚Ä¢ **–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞ Kindle –∏–ª–∏ PocketBook** (–æ—Ç 12,000 —Ä—É–±.) - –¥–ª—è –ª—é–±–∏—Ç–µ–ª–µ–π —á—Ç–µ–Ω–∏—è
‚Ä¢ **–ü–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤ –ª—é–±–∏–º—ã–π –º–∞–≥–∞–∑–∏–Ω** (–ª—é–±–∞—è —Å—É–º–º–∞) - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
      `.trim(),
      fallback: true,
      error: 'AI –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–∫–∞–∑–∞–Ω—ã –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'
    };
  }
}

export async function buildUserContext(userId: string, supabase: any): Promise<string> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: interests } = await supabase
      .from('user_interests')
      .select('category, keywords')
      .eq('user_id', userId);

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã
    const { data: views } = await supabase
      .from('product_views')
      .select(`
        wishlist_item:wishlist_items (
          title,
          description,
          price,
          category
        )
      `)
      .eq('user_id', userId)
      .order('viewed_at', { ascending: false })
      .limit(10);

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: wishlists } = await supabase
      .from('wishlists')
      .select('title, description, category')
      .eq('user_id', userId)
      .limit(5);

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    let context = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è: ';
    
    if (interests && interests.length > 0) {
      const categories = interests.map(i => i.category).join(', ');
      context += categories + '. ';
    }

    if (views && views.length > 0) {
      context += '–ù–µ–¥–∞–≤–Ω–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–ª: ';
      const viewedItems = views
        .map(v => v.wishlist_item?.title)
        .filter(Boolean)
        .slice(0, 5)
        .join(', ');
      context += viewedItems + '. ';
    }

    if (wishlists && wishlists.length > 0) {
      context += '–°–æ–∑–¥–∞–≤–∞–ª —Å–ø–∏—Å–∫–∏: ';
      const listTitles = wishlists.map(w => w.title).join(', ');
      context += listTitles + '. ';
    }

    return context || '–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫';
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:', error);
    return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π';
  }
}