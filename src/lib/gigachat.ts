export interface AIRecommendationRequest {
  context: string;
  userMessage?: string;
}

export interface AIRecommendationResponse {
  reply: string;
  fallback?: boolean;
  error?: string;
  usage?: any;
}

export const getAIRecommendations = async (
  request: AIRecommendationRequest
): Promise<AIRecommendationResponse> => {
  try {
    console.log('ü§ñ Requesting AI recommendations...');
    
    const response = await fetch('/.netlify/functions/gigachat', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        messages: [
          {
            role: 'user',
            content: request.userMessage || 
              `–î–∞–π –º–Ω–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∂–µ–ª–∞–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö.`
          }
        ],
        context: request.context
      }),
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    console.log('‚úÖ AI recommendations received');
    return data;
  } catch (error) {
    console.error('‚ùå AI recommendations error:', error);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    const fallbackRecommendations = `
‚Ä¢ **–£–º–Ω—ã–µ —á–∞—Å—ã Apple Watch –∏–ª–∏ Samsung Galaxy Watch** (–æ—Ç 25,000 —Ä—É–±.) - –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
‚Ä¢ **–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏ AirPods –∏–ª–∏ Sony WH-1000XM4** (–æ—Ç 15,000 —Ä—É–±.) - –¥–ª—è –º—É–∑—ã–∫–∏ –∏ –∑–≤–æ–Ω–∫–æ–≤
‚Ä¢ **–ü–æ—Ä—Ç–∞—Ç–∏–≤–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ JBL –∏–ª–∏ Marshall** (–æ—Ç 8,000 —Ä—É–±.) - –¥–ª—è –¥–æ–º–∞—à–Ω–∏—Ö –≤–µ—á–µ—Ä–∏–Ω–æ–∫
‚Ä¢ **–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞ Kindle –∏–ª–∏ PocketBook** (–æ—Ç 12,000 —Ä—É–±.) - –¥–ª—è –ª—é–±–∏—Ç–µ–ª–µ–π —á—Ç–µ–Ω–∏—è
‚Ä¢ **–ü–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤ –ª—é–±–∏–º—ã–π –º–∞–≥–∞–∑–∏–Ω** (–ª—é–±–∞—è —Å—É–º–º–∞) - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    `.trim();

    return {
      reply: fallbackRecommendations,
      fallback: true,
      error: 'AI –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–∫–∞–∑–∞–Ω—ã –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'
    };
  }
};

export const buildUserContext = async (userId: string, supabase: any): Promise<string> => {
  try {
    console.log('üîç Building user context for recommendations...');
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: profile } = await supabase
      .from('profiles')
      .select('interests, bio')
      .eq('id', userId)
      .single();

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–∫–∏ –∂–µ–ª–∞–Ω–∏–π
    const { data: wishlists } = await supabase
      .from('wishlists')
      .select(`
        title,
        category,
        tags,
        wishlist_items (
          title,
          price,
          priority,
          is_purchased
        )
      `)
      .eq('user_id', userId)
      .limit(5);

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã
    const { data: interests } = await supabase
      .from('user_interests')
      .select('category, keywords')
      .eq('user_id', userId);

    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    const { data: views } = await supabase
      .from('product_views')
      .select(`
        wishlist_item:wishlist_items (
          title,
          price,
          priority
        )
      `)
      .eq('user_id', userId)
      .order('viewed_at', { ascending: false })
      .limit(10);

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    let context = '';
    
    if (profile?.bio) {
      context += `–û —Å–µ–±–µ: ${profile.bio}. `;
    }

    if (profile?.interests?.length > 0) {
      context += `–ò–Ω—Ç–µ—Ä–µ—Å—ã: ${profile.interests.join(', ')}. `;
    }

    if (interests?.length > 0) {
      const categories = interests.map(i => i.category).join(', ');
      context += `–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤: ${categories}. `;
    }

    if (wishlists?.length > 0) {
      const items = wishlists
        .flatMap(w => w.wishlist_items || [])
        .filter(item => !item.is_purchased)
        .slice(0, 10)
        .map(item => `${item.title} (${item.price ? item.price + ' —Ä—É–±.' : '—Ü–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'})`)
        .join(', ');
      
      if (items) {
        context += `–¢–µ–∫—É—â–∏–µ –∂–µ–ª–∞–Ω–∏—è: ${items}. `;
      }

      const categories = wishlists
        .map(w => w.category)
        .filter(Boolean)
        .join(', ');
      
      if (categories) {
        context += `–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ø–∏—Å–∫–æ–≤: ${categories}. `;
      }
    }

    if (views?.length > 0) {
      const viewedItems = views
        .map(v => v.wishlist_item)
        .filter(Boolean)
        .map(item => item.title)
        .join(', ');
      
      if (viewedItems) {
        context += `–ù–µ–¥–∞–≤–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã: ${viewedItems}. `;
      }
    }

    const finalContext = context || '–î–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç';
    console.log('‚úÖ User context built successfully');
    return finalContext;
  } catch (error) {
    console.error('‚ùå Error building user context:', error);
    return '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
  }
};